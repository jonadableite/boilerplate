import Image from 'next/image'
import type { Metadata } from 'next/types'

import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { ChevronLeftSquareIcon, RssIcon } from 'lucide-react'
import { contentLayer } from '@/providers/content-layer'
import { notFound } from 'next/navigation'
import { Markdown } from '@/components/ui/markdown'
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@/components/ui/avatar'
import { AppConfig } from '@/boilerplate.config'
import { Link } from 'next-view-transitions'
import { XIcon } from '@/components/ui/icons/x-icon'
import { SiteTableOfContents } from '@/app/(site)/(components)/site-table-of-contents'
import { generateMetadata as baseGenerateMetadata } from '@/utils/metadata.utils'

// Configure dynamic behavior
export const dynamic = 'force-dynamic'
export const dynamicParams = true // Allow dynamic params that aren't generated by generateStaticParams

type PageProps = {
  params: Promise<{ slug: string }>
}

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { slug } = await params
  const post = await contentLayer.getPostBySlug('blog', slug)

  if (!post) {
    return baseGenerateMetadata({
      title: 'Post Not Found',
      description: 'The blog article you are looking for could not be found.',
      path: `/blog/${slug}`,
      noIndex: true,
    })
  }

  // Extract title and other data from the post
  const postTitle = post.data?.title || 'Blog Article'
  // Use description or generate excerpt from content
  const postExcerpt = post.content?.substring(0, 160) || ''
  const postCover = post.data?.cover || ''

  // Generate keywords based on post title and content
  const keywords = ['Blog Article', postTitle, 'SaaS Blog', 'Business Insights']

  return baseGenerateMetadata({
    title: postTitle,
    description: postExcerpt || `Read more about ${postTitle}`,
    path: `/blog/${slug}`,
    ogImage: postCover,
    keywords,
  })
}

export default async function Page({ params }: PageProps) {
  const { slug } = await params

  const post = await contentLayer.getPostBySlug('blog', slug)
  const related = await contentLayer.listPosts({ type: 'blog', limit: 3 })

  if (!post) return notFound()

  return (
    <article className="pt-16">
      <header className="border-b pb-8">
        <div className="container mx-auto max-w-screen-md space-y-8">
          <div className="flex items-center justify-between">
            <Button
              variant="link"
              className="gap-2 rounded-full text-md"
              size="sm"
            >
              <ChevronLeftSquareIcon />
              Voltar para o site
            </Button>
            <div className="ml-auto flex items-center space-x-2">
              {AppConfig.links.rss && (
                <Button variant="ghost" className="rounded-full h-9" asChild>
                  <Link href={AppConfig.links.rss}>
                    RSS Feed <RssIcon className="size-4" />
                  </Link>
                </Button>
              )}
              {AppConfig.links.twitter && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="rounded-full h-9"
                  asChild
                >
                  <Link
                    href={AppConfig.links.twitter}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <XIcon className="size-4" />
                  </Link>
                </Button>
              )}
            </div>
          </div>

          {post.data.cover && (
            <Image
              className="rounded-md border"
              width={1280}
              height={720}
              src={post.data.cover}
              alt={post.data.title}
            />
          )}

          <div>
            <p className="text-muted-foreground mb-1">
              Published on {post.data.date}
            </p>
            <h1 className="text-2xl max-w-[60%] font-bold mb-8">
              {post.data.title}
            </h1>

            <div className="flex items-center space-x-8 text-sm">
              <div>
                <p className="text-muted-foreground">Published on</p>
                <div className="flex gap-2">{post.data.date}</div>
              </div>

              <div>
                <p className="text-muted-foreground">Written by</p>
                <div className="flex items-center gap-2">
                  <Avatar className="size-4 !rounded-full">
                    <AvatarImage src={post.data.authorImage} />
                    <AvatarFallback>{post.data.author?.[0]}</AvatarFallback>
                  </Avatar>

                  {post.data.author}
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>
      <main>
        <div className="container mx-auto max-w-screen-md space-y-8 grid md:grid-cols-[28rem_1fr] gap-8">
          <aside className="relative order-first md:order-last">
            <SiteTableOfContents content={post} className="sticky top-24" />
          </aside>
          <div className="md:pt-8 space-y-8">
            <Markdown>{post.content}</Markdown>
            <section className="border-t pt-8">
              <main>
                <Badge variant="outline" className="rounded-md mb-4">
                  AD
                </Badge>
                <h4 className="font-bold mb-1">Quick Tip</h4>
                <p className="text-sm text-muted-foreground">
                  Always implement proper error handling and reconnection logic
                  in your SSE clients to ensure a robust user experience.
                </p>

                <Button variant="outline" className="mt-4">
                  Learn More
                </Button>
              </main>
            </section>
            <section className="space-y-4 border-t pt-8">
              <header>
                <h2 className="font-bold text-lg">You might also like</h2>
              </header>
              <main>
                <div className="grid divide-y">
                  {related.map((item, i) => (
                    <article
                      key={i}
                      className="grid grid-cols-[auto_1fr] gap-4 py-6 first:pt-0"
                    >
                      <img
                        className="bg-black/40 rounded-md h-32 w-32"
                        src={item.data.cover}
                        alt={item.data.title}
                      />
                      <div className="flex flex-col h-full">
                        <div className="flex items-center text-xs space-x-2 mb-auto">
                          <span className="font-semibold">
                            {item.data.tags?.[0] ?? 'Blog'}
                          </span>
                          <small className="text-muted-foreground">
                            {item.data.date}
                          </small>
                        </div>
                        <h2 className="font-bold text-sm">{item.data.title}</h2>
                        <p className="text-muted-foreground text-sm">
                          {item.excerpt}
                        </p>
                      </div>
                    </article>
                  ))}
                </div>
              </main>
            </section>
          </div>
        </div>
      </main>
    </article>
  )
}
