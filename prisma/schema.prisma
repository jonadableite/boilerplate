// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InstanceConnectionStatus {
  open
  close
  connecting
}

model ApiKey {
  id             String       @id @default(uuid())
  description    String
  key            String       @unique
  enabled        Boolean      @default(true)
  neverExpires   Boolean      @default(false)
  expiresAt      DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, key])
  @@map("api_key")
}

model Webhook {
  id     String   @id @default(uuid())
  url    String
  secret String
  events String[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Integration Integration[]

  @@map("webhook")
}

model Member {
  id String @id @default(uuid())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitations Invitation[]

  teamId String?

  @@unique([organizationId, userId])
  @@map("memberships")
}

model User {
  id                String             @id
  name              String
  email             String
  emailVerified     Boolean
  image             String?
  role              String?
  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  members           Member[]
  invitations       Invitation[]
  whatsappInstances WhatsAppInstance[] @relation("UserWhatsAppInstances")
  metadata          Json?

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]
  WhatsAppInstance WhatsAppInstance[]

  assignedContacts      Contact[]            @relation("ContactAssignedTo")
  assignedConversations Conversation[]       @relation("ConversationAssignedTo")
  sentMessages          Message[]            @relation("MessageSentBy")
  funnelStageChanges    FunnelStageHistory[] @relation("FunnelStageChangedBy")
  WarmupStats           WarmupStats[]
  WarmupContent         WarmupContent[]

  createdCampaigns Campaign[] @relation("CampaignCreatedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id        String   @id
  name      String
  slug      String?
  logo      String?
  createdAt DateTime
  metadata  String?

  members            Member[]
  invitations        Invitation[]
  apiKeys            ApiKey[]
  webhooks           Webhook[]
  integrations       Integration[]
  submissions        Submission[]
  leads              Lead[]
  contacts           Contact[]
  conversations      Conversation[]
  messages           Message[]
  funnelStageHistory FunnelStageHistory[]

  customer             Customer?
  WhatsAppInstance     WhatsAppInstance[]
  WarmupStats          WarmupStats[]
  MediaStats           MediaStats[]
  MediaReceived        MediaReceived[]
  WarmupContent        WarmupContent[]
  WarmupExternalNumber WarmupExternalNumber[]

  healthMetrics         HealthMetrics[]
  healthAlerts          HealthAlerts[]
  healthRecommendations HealthRecommendations[]
  accountHealthHistory  AccountHealthHistory[]

  campaigns Campaign[]

  @@unique([slug])
  @@map("organization")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  Member         Member?      @relation(fields: [memberId], references: [id])
  memberId       String?

  teamId String?

  @@map("invitation")
}

model Integration {
  id       String  @id @default(cuid())
  provider String
  enabled  Boolean @default(true)
  metadata Json?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  webhookId String?
  webhook   Webhook? @relation(fields: [webhookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, organizationId])
  @@index([organizationId])
  @@index([webhookId])
  @@map("integration")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor")
}

model Customer {
  id         String  @id @default(uuid())
  providerId String  @unique
  name       String
  email      String?
  metadata   Json?

  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("customer")
}

model Plan {
  id          String  @id @default(uuid())
  providerId  String  @unique
  slug        String  @unique
  name        String
  description String?
  metadata    Json?

  prices Price[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  archived  Boolean  @default(false)

  @@map("plan")
}

model Price {
  id            String @id @default(uuid())
  providerId    String @unique
  slug          String @unique
  amount        Int
  currency      String
  interval      String // 'day' | 'week' | 'month' | 'year'
  intervalCount Int
  metadata      Json?

  subscriptions Subscription[]

  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("price")
}

enum ProrationBehavior {
  create_prorations
  none
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  unpaid
  trialing
}

model Subscription {
  id                 String             @id @default(uuid())
  providerId         String             @unique
  quantity           Int?
  trialDays          Int?
  metadata           Json?
  billingCycleAnchor DateTime?
  prorationBehavior  ProrationBehavior?
  status             SubscriptionStatus

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  priceId String
  price   Price  @relation(fields: [priceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscription")
}

model Lead {
  id       String  @id @default(uuid())
  email    String
  name     String?
  phone    String?
  metadata Json?

  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("lead")
}

model Submission {
  id String @id @default(uuid())

  metadata Json?

  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("submissions")
}

model WhatsAppInstance {
  id                  String                   @id @default(uuid())
  evolutionInstanceId String?                  @unique
  instanceName        String                   @unique
  status              InstanceConnectionStatus @default(connecting)
  ownerJid            String? // Exemplo: 5512988444921@s.whatsapp.net
  profileName         String?
  profilePicUrl       String?

  lastSeen DateTime?
  metadata Json?

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation("UserWhatsAppInstances", fields: [createdById], references: [id], onDelete: Cascade)

  conversations Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, instanceName])
  @@index([organizationId, userId])
  @@index([status])
  @@map("whatsapp_instance")
}

enum ContactStatus {
  LEAD
  PROSPECT
  CUSTOMER
  INACTIVE
}

enum FunnelStage {
  NEW_LEAD
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  STICKER
  BUTTON_REPLY
  LIST_REPLY
  LOCATION
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

model Contact {
  id             String  @id @default(uuid())
  whatsappNumber String  @unique
  name           String?
  email          String?
  profilePicUrl  String?

  // CRM Fields
  status      ContactStatus @default(LEAD)
  funnelStage FunnelStage   @default(NEW_LEAD)
  tags        String[]      @default([])
  notes       String?

  // Metadata
  lastSeenAt DateTime?
  isBlocked  Boolean   @default(false)
  metadata   Json?

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  assignedToId String?
  assignedTo   User?   @relation("ContactAssignedTo", fields: [assignedToId], references: [id])

  conversations Conversation[]
  messages      Message[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  FunnelStageHistory FunnelStageHistory[]

  @@unique([organizationId, whatsappNumber])
  @@index([organizationId, status])
  @@index([organizationId, funnelStage])
  @@index([assignedToId])
  @@map("contact")
}

model Conversation {
  id             String  @id @default(uuid())
  whatsappChatId String // ID do chat no WhatsApp (pode ser grupo ou individual)
  title          String? // Título personalizado da conversa

  // Status e controle
  status      ConversationStatus @default(OPEN)
  isGroup     Boolean            @default(false)
  unreadCount Int                @default(0)

  // Última mensagem (para otimização)
  lastMessageAt   DateTime?
  lastMessage     String? // Prévia da última mensagem
  lastMessageType MessageType?

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  whatsappInstanceId String
  whatsappInstance   WhatsAppInstance @relation(fields: [whatsappInstanceId], references: [id], onDelete: Cascade)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("ConversationAssignedTo", fields: [assignedToId], references: [id])

  messages Message[]

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, whatsappChatId, whatsappInstanceId])
  @@index([organizationId, status])
  @@index([organizationId, lastMessageAt])
  @@index([assignedToId])
  @@index([whatsappInstanceId])
  @@map("conversation")
}

model Message {
  id                String  @id @default(uuid())
  whatsappMessageId String? @unique // ID da mensagem no WhatsApp

  // Conteúdo da mensagem
  content   String
  type      MessageType      @default(TEXT)
  direction MessageDirection
  status    MessageStatus    @default(PENDING)

  // Mídia (se aplicável)
  mediaUrl  String?
  mediaType String? // MIME type
  fileName  String?
  fileSize  Int?

  // Mensagem citada
  quotedMessageId String?
  quotedMessage   Message?  @relation("MessageQuote", fields: [quotedMessageId], references: [id])
  quotedBy        Message[] @relation("MessageQuote")

  // Metadados do WhatsApp
  timestamp  DateTime // Timestamp original da mensagem
  fromMe     Boolean  @default(false)
  fromName   String? // Nome do remetente
  fromNumber String? // Número do remetente

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  userId String? // ID do usuário que enviou (se outbound)
  user   User?   @relation("MessageSentBy", fields: [userId], references: [id])

  // Metadata adicional
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId, timestamp])
  @@index([organizationId, direction, status])
  @@index([contactId])
  @@index([type])
  @@map("message")
}

model FunnelStageHistory {
  id String @id @default(uuid())

  fromStage FunnelStage?
  toStage   FunnelStage
  reason    String? // Motivo da mudança
  notes     String? // Observações adicionais

  // Relacionamentos
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  changedById String
  changedBy   User   @relation("FunnelStageChangedBy", fields: [changedById], references: [id])

  createdAt DateTime @default(now())

  @@index([contactId, createdAt])
  @@index([organizationId, toStage])
  @@map("funnel_stage_history")
}

enum WarmupStatus {
  INACTIVE
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
}

enum WarmupMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  STICKER
  REACTION
}

model WarmupStats {
  id             String       @id @default(uuid())
  instanceName   String       @unique // Nome da instância Evolution API
  status         WarmupStatus @default(INACTIVE)
  startTime      DateTime     @default(now())
  pauseTime      DateTime?
  warmupTime     Int?         @default(0) // Tempo total de aquecimento em segundos
  progress       Float?       @default(0.0) // 0.0 a 1.0 (0% a 100%)
  lastActive     DateTime?
  targetDuration Int?         @default(2073600) // 24 dias em segundos (tempo padrão de aquecimento)

  // Configurações específicas do aquecimento
  config Json? // Configurações do aquecimento (percentuais, delays, etc.)

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Estatísticas relacionadas
  mediaStatsId String     @unique
  mediaStats   MediaStats @relation(fields: [mediaStatsId], references: [id], onDelete: Cascade)

  mediaReceivedId String        @unique
  mediaReceived   MediaReceived @relation(fields: [mediaReceivedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, status])
  @@index([userId, status])
  @@index([instanceName, status])
  @@map("warmup_stats")
}

model MediaStats {
  id            String @id @default(uuid())
  instanceName  String // Nome da instância
  text          Int    @default(0)
  image         Int    @default(0)
  video         Int    @default(0)
  audio         Int    @default(0)
  sticker       Int    @default(0)
  reaction      Int    @default(0)
  totalDaily    Int    @default(0)
  totalAllTime  Int    @default(0)
  totalSent     Int    @default(0)
  totalReceived Int    @default(0)

  // Data de referência para as estatísticas
  date DateTime @default(now())

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  warmupStats WarmupStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([instanceName, date, organizationId])
  @@index([organizationId, instanceName])
  @@index([date])
  @@map("media_stats")
}

model MediaReceived {
  id           String @id @default(uuid())
  instanceName String // Nome da instância
  text         Int    @default(0)
  image        Int    @default(0)
  video        Int    @default(0)
  audio        Int    @default(0)
  sticker      Int    @default(0)
  reaction     Int    @default(0)
  totalDaily   Int    @default(0)
  totalAllTime Int    @default(0)

  // Data de referência para as estatísticas
  date DateTime @default(now())

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  warmupStats WarmupStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([instanceName, date, organizationId])
  @@index([organizationId, instanceName])
  @@index([date])
  @@map("media_received")
}

model WarmupContent {
  id       String            @id @default(uuid())
  type     WarmupMessageType
  content  String? // Texto ou base64 para mídia
  caption  String? // Legenda para mídia
  fileName String? // Nome do arquivo para documentos
  mimeType String? // Tipo MIME para mídia
  metadata Json? // Dados adicionais

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, type])
  @@index([userId, type])
  @@map("warmup_content")
}

model WarmupExternalNumber {
  id          String  @id @default(uuid())
  phoneNumber String // Número com código do país (ex: 559999999999)
  name        String? // Nome/descrição do número
  active      Boolean @default(true)

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, phoneNumber])
  @@index([organizationId, active])
  @@map("warmup_external_number")
}

// Modelos para análise de saúde do sistema
model HealthBenchmarks {
  id                  String   @id @default(uuid())
  optimalResponseRate Float    @default(0.75) // 75% de taxa de resposta ideal
  maxDailyMessages    Int      @default(1000) // Máximo de mensagens por dia
  maxMessagesPerHour  Int      @default(100) // Máximo de mensagens por hora
  minResponseTime     Int      @default(300) // Tempo mínimo de resposta em segundos (5 min)
  maxResponseTime     Int      @default(3600) // Tempo máximo de resposta em segundos (1 hora)
  criticalSpamReports Int      @default(5) // Número crítico de relatórios de spam
  criticalBlockRate   Float    @default(0.05) // Taxa crítica de bloqueios (5%)
  minDeliveryRate     Float    @default(0.95) // Taxa mínima de entrega (95%)
  maxInactivityHours  Int      @default(72) // Máximo de horas inativo
  safeMessagingHours  Json     @default("[9,10,11,12,13,14,15,16,17,18]") // Horários seguros
  safeDaysOfWeek      Json     @default("[1,2,3,4,5]") // Dias seguros da semana
  optimalMessageGap   Int      @default(30) // Gap ideal entre mensagens em segundos
  maxBulkSize         Int      @default(50) // Tamanho máximo de lote
  humanBehaviorScore  Float    @default(0.8) // Score mínimo de comportamento humano
  version             String   @default("1.0")
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("health_benchmarks")
}

model HealthMetrics {
  id             String       @id @default(uuid())
  instanceName   String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Métricas de atividade
  messagesSent24h     Int   @default(0)
  messagesReceived24h Int   @default(0)
  responseRate        Float @default(0.0)
  averageResponseTime Int   @default(0) // Em segundos
  deliveryRate        Float @default(1.0)
  readRate            Float @default(0.0)

  // Métricas de risco
  spamReports         Int   @default(0)
  blockRate           Float @default(0.0)
  policyViolations    Int   @default(0)
  warningsReceived    Int   @default(0)
  accountRestrictions Int   @default(0)

  // Métricas de comportamento
  messagingFrequency Float @default(0.0) // Mensagens por hora
  peakHours          Json  @default("[]") // Horários de pico
  messagePatterns    Json  @default("{}") // Padrões de mensagem
  humanBehaviorScore Float @default(1.0) // Score de comportamento humano

  // Métricas de engajamento
  clickThroughRate    Float @default(0.0)
  conversionRate      Float @default(0.0)
  userEngagementScore Float @default(0.0)

  // Score geral e nível de risco
  healthScore Float           @default(100.0)
  riskLevel   HealthRiskLevel @default(LOW)
  riskFactors Json            @default("[]") // Fatores de risco identificados

  // Comparação com benchmarks
  benchmarkCompliance Float @default(1.0) // Percentual de compliance
  deviationScore      Float @default(0.0) // Score de desvio dos padrões

  // Metadata de análise
  dataQuality     Float @default(1.0) // Qualidade dos dados analisados
  confidenceLevel Float @default(0.95) // Nível de confiança da análise
  samplingPeriod  Int   @default(24) // Período de amostragem em horas

  analyzedAt     DateTime  @default(now())
  nextAnalysisAt DateTime?

  @@unique([instanceName, organizationId, analyzedAt])
  @@index([organizationId, riskLevel])
  @@index([instanceName, analyzedAt])
  @@map("health_metrics")
}

model HealthAlerts {
  id             String       @id @default(uuid())
  instanceName   String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  alertType      HealthAlertType
  severity       HealthAlertSeverity
  title          String
  message        String
  details        Json                @default("{}")
  actionRequired String?

  isActive   Boolean   @default(true)
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?

  // Configurações de alerta
  threshold      Float?
  currentValue   Float?
  trendDirection String? // UP, DOWN, STABLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, isActive])
  @@index([instanceName, severity])
  @@map("health_alerts")
}

model HealthRecommendations {
  id             String       @id @default(uuid())
  instanceName   String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  recommendationType String
  priority           HealthPriority
  title              String
  description        String
  actions            Json           @default("[]") // Array de ações recomendadas
  expectedImpact     String? // Impacto esperado
  difficulty         String? // EASY, MEDIUM, HARD
  estimatedTime      String? // Tempo estimado para implementação

  isImplemented Boolean   @default(false)
  implementedAt DateTime?
  effectiveness Float? // Score de efetividade após implementação

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, priority])
  @@index([instanceName, isImplemented])
  @@map("health_recommendations")
}

model AccountHealthHistory {
  id             String       @id @default(uuid())
  instanceName   String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Snapshot histórico
  healthScore Float
  riskLevel   HealthRiskLevel
  mainMetrics Json // Snapshot das principais métricas
  keyChanges  Json            @default("[]") // Mudanças importantes

  // Comparação temporal
  scoreChange   Float @default(0.0) // Mudança no score
  trendAnalysis Json  @default("{}") // Análise de tendências
  seasonality   Json  @default("{}") // Análise de sazonalidade

  // Eventos correlacionados
  eventsDetected Json @default("[]") // Eventos que afetaram a saúde

  recordedAt DateTime @default(now())

  @@index([organizationId, recordedAt])
  @@index([instanceName, healthScore])
  @@map("account_health_history")
}

enum HealthRiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum HealthAlertType {
  SPAM_REPORTS
  HIGH_BLOCK_RATE
  LOW_RESPONSE_RATE
  MESSAGE_VOLUME
  DELIVERY_ISSUES
  POLICY_VIOLATION
  UNUSUAL_PATTERN
  ACCOUNT_WARNING
  ENGAGEMENT_DROP
  COMPLIANCE_ISSUE
}

enum HealthAlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum HealthPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Modelos para Campanhas de Disparo em Massa
enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
  ERROR
}

enum CampaignType {
  IMMEDIATE
  SCHEDULED
  RECURRING
}

enum LeadStatus {
  PENDING
  PROCESSING
  SENT
  DELIVERED
  READ
  FAILED
  BLOCKED
}

model Campaign {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Configurações da campanha
  message      String // Mensagem obrigatória
  mediaType    String? // image, video, audio, sticker
  mediaUrl     String? // URL da mídia
  mediaCaption String? // Legenda da mídia
  mediaBase64  String? // Mídia em base64

  // Configurações de tempo
  minDelay Int @default(30) // Delay mínimo em segundos
  maxDelay Int @default(120) // Delay máximo em segundos

  // Configurações de instâncias
  useInstanceRotation Boolean  @default(true) // Usar rotação de instâncias
  selectedInstances   String[] @default([]) // Instâncias selecionadas

  // Agendamento
  scheduledAt DateTime? // Data/hora agendada
  timezone    String    @default("America/Sao_Paulo")
  recurring   Json? // Configuração de recorrência

  // Status e controle
  status   CampaignStatus @default(DRAFT)
  type     CampaignType   @default(IMMEDIATE)
  progress Float          @default(0.0)

  // Estatísticas
  totalLeads     Int @default(0)
  sentCount      Int @default(0)
  deliveredCount Int @default(0)
  readCount      Int @default(0)
  failedCount    Int @default(0)

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation("CampaignCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  leads       CampaignLead[]
  statistics  CampaignStatistics?
  messageLogs MessageLog[]

  // Metadados
  metadata Json?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  @@index([organizationId, status])
  @@index([organizationId, type])
  @@index([scheduledAt])
  @@map("campaign")
}

model CampaignLead {
  id String @id @default(uuid())

  // Dados do lead
  name  String?
  phone String // Número do telefone
  email String?

  // Status do envio
  status LeadStatus @default(PENDING)

  // Timestamps de status
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  failedAt    DateTime?

  // Informações de erro
  failureReason String?
  retryCount    Int     @default(0)

  // ID da mensagem no WhatsApp
  messageId String?

  // Relacionamentos
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Metadados
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([campaignId, status])
  @@index([phone])
  @@map("campaign_lead")
}

model CampaignStatistics {
  id         String   @id @default(uuid())
  campaignId String   @unique
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Contadores
  totalLeads     Int @default(0)
  sentCount      Int @default(0)
  deliveredCount Int @default(0)
  readCount      Int @default(0)
  failedCount    Int @default(0)
  blockedCount   Int @default(0)

  // Métricas de tempo
  averageDeliveryTime Float? // Tempo médio de entrega em segundos
  averageReadTime     Float? // Tempo médio de leitura em segundos

  // Taxas
  deliveryRate Float @default(0.0) // Taxa de entrega
  readRate     Float @default(0.0) // Taxa de leitura

  // Metadados
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_statistics")
}

model MessageLog {
  id String @id @default(uuid())

  // Identificadores
  messageId  String   @unique // ID da mensagem no WhatsApp
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  campaignLeadId String?

  // Conteúdo e tipo
  messageType String // text, image, video, audio, sticker
  content     String? // Conteúdo da mensagem

  // Status e histórico
  status        String @default("PENDING")
  statusHistory Json   @default("[]") // Array de mudanças de status

  // Timestamps
  messageDate DateTime // Data da mensagem no WhatsApp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([campaignId, status])
  @@index([messageDate])
  @@map("message_log")
}
